[
  {
    "id": "sd_001",
    "type": "mcq",
    "question": "What’s the time complexity of searching in a balanced binary search tree?",
    "options": ["O(log n)", "O(n)", "O(1)", "O(n log n)"],
    "correctAnswer": "O(log n)",
    "explanation": "Balanced BSTs (like AVL/Red‑Black) have O(log n) search time.",
    "domain": "data structures",
    "careerTags": ["software_developer", "data_analyst"],
    "conceptTags": ["data structures"],
    "skillTags": ["problem-solving"],
    "difficulty": "Easy",
    "format": "text",
    "answerType": "single-choice",
    "timeLimitSeconds": 30,
    "scoreWeight": 1.0,
    "isVerified": true,
    "hasCodeBlock": false,
    "showCalculator": false,
    "allowSkip": false,
    "showOnReviewScreen": true
  },
  {
    "id": "sd_002",
    "type": "mcq",
    "question": "What is encapsulation in OOP?",
    "options": ["Hiding internal state and exposing behavior", "Inheriting properties", "Method overloading", "Inter-object communication"],
    "correctAnswer": "Hiding internal state and exposing behavior",
    "explanation": "Encapsulation bundles data & methods, keeping internal state hidden.",
    "domain": "OOP",
    "careerTags": ["software_developer", "dev_ops_engineer"],
    "conceptTags": ["OOP"],
    "skillTags": ["conceptual"],
    "difficulty": "Easy",
    "format": "text",
    "answerType": "single-choice",
    "timeLimitSeconds": 45,
    "scoreWeight": 1.0,
    "isVerified": true,
    "hasCodeBlock": false,
    "showCalculator": false,
    "allowSkip": false,
    "showOnReviewScreen": true
  },
  {
    "id": "sd_003",
    "type": "output",
    "question": "What’s the output of this C code?\n```c\nint x=5; printf(\"%d %d\", x++, ++x);\n```",
    "correctAnswer": "Undefined behavior",
    "explanation": "Modifying x twice without a sequence point is undefined behavior.",
    "domain": "debugging",
    "careerTags": ["software_developer"],
    "conceptTags": ["debugging"],
    "skillTags": ["problem-solving"],
    "difficulty": "Medium",
    "format": "code",
    "answerType": "short-text",
    "timeLimitSeconds": 60,
    "scoreWeight": 1.0,
    "isVerified": true,
    "hasCodeBlock": true,
    "showCalculator": false,
    "allowSkip": false,
    "showOnReviewScreen": true
  },
  {
    "id": "sd_004",
    "type": "scenario",
    "question": "To avoid phantom reads in a banking system, which SQL isolation level is best?",
    "options": ["Read Uncommitted", "Repeatable Read", "Serializable", "Read Committed"],
    "correctAnswer": "Serializable",
    "explanation": "Serializable prevents phantom reads by ensuring strict transaction isolation.",
    "domain": "databases",
    "careerTags": ["database_admin", "software_developer"],
    "conceptTags": ["databases"],
    "skillTags": ["software engineering"],
    "difficulty": "Medium",
    "format": "text",
    "answerType": "single-choice",
    "timeLimitSeconds": 45,
    "scoreWeight": 1.0,
    "isVerified": true,
    "hasCodeBlock": false,
    "showCalculator": false,
    "allowSkip": false,
    "showOnReviewScreen": true
  },
  {
    "id": "sd_005",
    "type": "mcq",
    "question": "Which OS scheduling algorithm gives high throughput but may starve processes?",
    "options": ["Round Robin", "FCFS", "Shortest Job First", "Priority Scheduling"],
    "correctAnswer": "Shortest Job First",
    "explanation": "SJF maximizes throughput but can cause starvation for longer jobs.",
    "domain": "os/networks",
    "careerTags": ["dev_ops_engineer"],
    "conceptTags": ["operating systems"],
    "skillTags": ["problem-solving"],
    "difficulty": "Medium",
    "format": "text",
    "answerType": "single-choice",
    "timeLimitSeconds": 40,
    "scoreWeight": 1.0,
    "isVerified": true,
    "hasCodeBlock": false,
    "showCalculator": false,
    "allowSkip": false,
    "showOnReviewScreen": true
  },
  {
    "id": "sd_006",
    "type": "mcq",
    "question": "In SQL, which JOIN returns only rows existing in both tables?",
    "options": ["LEFT JOIN", "RIGHT JOIN", "INNER JOIN", "FULL OUTER JOIN"],
    "correctAnswer": "INNER JOIN",
    "explanation": "INNER JOIN returns rows where matching keys exist in both tables.",
    "domain": "databases",
    "careerTags": ["database_admin", "data_analyst"],
    "conceptTags": ["databases"],
    "skillTags": ["problem-solving"],
    "difficulty": "Easy",
    "format": "text",
    "answerType": "single-choice",
    "timeLimitSeconds": 30,
    "scoreWeight": 1.0,
    "isVerified": true,
    "hasCodeBlock": false,
    "showCalculator": false,
    "allowSkip": false,
    "showOnReviewScreen": true
  },
  {
    "id": "sd_007",
    "type": "mcq",
    "question": "Which HTTP method is idempotent and safe?",
    "options": ["POST", "PUT", "GET", "DELETE"],
    "correctAnswer": "GET",
    "explanation": "GET should not have side-effects and can be retried safely.",
    "domain": "os/networks",
    "careerTags": ["cloud_engineer", "software_developer"],
    "conceptTags": ["networking"],
    "skillTags": ["software engineering"],
    "difficulty": "Easy",
    "format": "text",
    "answerType": "single-choice",
    "timeLimitSeconds": 30,
    "scoreWeight": 1.0,
    "isVerified": true,
    "hasCodeBlock": false,
    "showCalculator": false,
    "allowSkip": false,
    "showOnReviewScreen": true
  },
  {
    "id": "sd_008",
    "type": "output",
    "question": "What does this Python print?\n```python\nlst = [i*i for i in range(3)]\nprint(lst)\n```",
    "correctAnswer": "[0, 1, 4]",
    "explanation": "Squares of 0,1,2 are 0,1,4 using list comprehension.",
    "domain": "tool familiarity",
    "careerTags": ["data_analyst", "ml_engineer"],
    "conceptTags": ["Python", "list comprehension"],
    "skillTags": ["problem-solving"],
    "difficulty": "Easy",
    "format": "code",
    "answerType": "short-text",
    "timeLimitSeconds": 30,
    "scoreWeight": 1.0,
    "isVerified": true,
    "hasCodeBlock": true,
    "showCalculator": false,
    "allowSkip": false,
    "showOnReviewScreen": true
  },
  {
    "id": "sd_009",
    "type": "debug",
    "question": "Fix this C++ pointer bug:\n```cpp\nint *p;\n*p = 10;\n```",
    "correctAnswer": "Allocate p before use, e.g., int x; p=&x; *p=10;",
    "explanation": "Pointer 'p' is uninitialized and must point to valid memory.",
    "domain": "debugging",
    "careerTags": ["software_developer"],
    "conceptTags": ["C++", "pointers"],
    "skillTags": ["debugging"],
    "difficulty": "Medium",
    "format": "code",
    "answerType": "short-text",
    "timeLimitSeconds": 60,
    "scoreWeight": 1.0,
    "isVerified": true,
    "hasCodeBlock": true,
    "showCalculator": false,
    "allowSkip": false,
    "showOnReviewScreen": true
  },
  {
    "id": "sd_010",
    "type": "scenario",
    "question": "How do you detect and prevent SQL injection in web forms?",
    "options": ["Sanitize inputs", "Use prepared statements", "Escape quotes manually", "Both A and B"],
    "correctAnswer": "Both A and B",
    "explanation": "Sanitizing inputs and using prepared statements guard against injections.",
    "domain": "cybersecurity",
    "careerTags": ["cybersecurity_analyst", "software_developer"],
    "conceptTags": ["web security"],
    "skillTags": ["software engineering"],
    "difficulty": "Medium",
    "format": "text",
    "answerType": "single-choice",
    "timeLimitSeconds": 50,
    "scoreWeight": 1.0,
    "isVerified": true,
    "hasCodeBlock": false,
    "showCalculator": false,
    "allowSkip": false,
    "showOnReviewScreen": true
  },
  {
    "id": "sd_011",
    "type": "mcq",
    "question": "Which Docker concept speeds up build caching?",
    "options": ["Volume mounts", "Image layering", "Bind mounts", "Service mesh"],
    "correctAnswer": "Image layering",
    "explanation": "Docker caches layers so rebuilds can skip unchanged steps.",
    "domain": "tool familiarity",
    "careerTags": ["dev_ops_engineer", "cloud_engineer"],
    "conceptTags": ["Docker"],
    "skillTags": ["dev ops"],
    "difficulty": "Medium",
    "format": "text",
    "answerType": "single-choice",
    "timeLimitSeconds": 35,
    "scoreWeight": 1.0,
    "isVerified": true,
    "hasCodeBlock": false,
    "showCalculator": false,
    "allowSkip": false,
    "showOnReviewScreen": true
  },
  {
    "id": "sd_012",
    "type": "mcq",
    "question": "Which AWS service is best suited for object storage?",
    "options": ["EC2", "S3", "Lambda", "RDS"],
    "correctAnswer": "S3",
    "explanation": "Amazon S3 is designed for storing and retrieving large amounts of data.",
    "domain": "cloud",
    "careerTags": ["cloud_engineer"],
    "conceptTags": ["AWS"],
    "skillTags": ["tool familiarity"],
    "difficulty": "Easy",
    "format": "text",
    "answerType": "single-choice",
    "timeLimitSeconds": 30,
    "scoreWeight": 1.0,
    "isVerified": true,
    "hasCodeBlock": false,
    "showCalculator": false,
    "allowSkip": false,
    "showOnReviewScreen": true
  },
  {
    "id": "sd_013",
    "type": "scenario",
    "question": "You have 10 GB log files per day. How would you optimize storage and search?",
    "options": ["Store raw on disk", "Compress & index", "Delete old ones", "Stream only"],
    "correctAnswer": "Compress & index",
    "explanation": "Compression saves space; indexing allows fast querying.",
    "domain": "cloud",
    "careerTags": ["cloud_engineer", "data_analyst"],
    "conceptTags": ["logging", "storage"],
    "skillTags": ["software engineering"],
    "difficulty": "Hard",
    "format": "text",
    "answerType": "single-choice",
    "timeLimitSeconds": 60,
    "scoreWeight": 1.0,
    "isVerified": true,
    "hasCodeBlock": false,
    "showCalculator": false,
    "allowSkip": false,
    "showOnReviewScreen": true
  },
  {
    "id": "sd_014",
    "type": "mcq",
    "question": "In ML, what is the bias–variance tradeoff?",
    "options": ["Balancing underfitting vs. overfitting", "Selecting features", "Normalizing data", "Ensembling models"],
    "correctAnswer": "Balancing underfitting vs. overfitting",
    "explanation": "Bias‑variance tradeoff reflects model simplicity vs data fitting quality.",
    "domain": "machine learning",
    "careerTags": ["ml_engineer", "data_analyst"],
    "conceptTags": ["ML concepts"],
    "skillTags": ["problem-solving"],
    "difficulty": "Medium",
    "format": "text",
    "answerType": "single-choice",
    "timeLimitSeconds": 45,
    "scoreWeight": 1.0,
    "isVerified": true,
    "hasCodeBlock": false,
    "showCalculator": false,
    "allowSkip": false,
    "showOnReviewScreen": true
  },
  {
    "id": "sd_015",
    "type": "output",
    "question": "What’s the output of this Java code?\n```java\nSystem.out.println(\"a\" + 1 + 2);\n```",
    "correctAnswer": "a12",
    "explanation": "Java concatenates strings left‑to‑right: \"a1\" then \"a12\".",
    "domain": "tool familiarity",
    "careerTags": ["software_developer"],
    "conceptTags": ["Java"],
    "skillTags": ["problem-solving"],
    "difficulty": "Easy",
    "format": "code",
    "answerType": "short-text",
    "timeLimitSeconds": 30,
    "scoreWeight": 1.0,
    "isVerified": true,
    "hasCodeBlock": true,
    "showCalculator": false,
    "allowSkip": false,
    "showOnReviewScreen": true
  },
  {
    "id": "sd_016",
    "type": "mcq",
    "question": "Which data structure best implements an LRU cache?",
    "options": ["Array", "HashMap + doubly-linked list", "Stack", "Queue"],
    "correctAnswer": "HashMap + doubly-linked list",
    "explanation": "This combo supports O(1) access and eviction operations.",
    "domain": "data structures",
    "careerTags": ["software_developer"],
    "conceptTags": ["Data structures"],
    "skillTags": ["software engineering"],
    "difficulty": "Medium",
    "format": "text",
    "answerType": "single-choice",
    "timeLimitSeconds": 40,
    "scoreWeight": 1.0,
    "isVerified": true,
    "hasCodeBlock": false,
    "showCalculator": false,
    "allowSkip": false,
    "showOnReviewScreen": true
  },
  {
    "id": "sd_017",
    "type": "debug",
    "question": "Python bug: modifying a list while iterating:\n`for i in range(len(lst)): lst.remove(lst[i])`. What’s wrong?",
    "correctAnswer": "Removing while iterating causes skips; use a copy or list comprehension.",
    "explanation": "Mutating a list during iteration leads to skipped indices and wrong behavior.",
    "domain": "debugging",
    "careerTags": ["software_developer"],
    "conceptTags": ["Python"],
    "skillTags": ["debugging"],
    "difficulty": "Hard",
    "format": "code",
    "answerType": "short-text",
    "timeLimitSeconds": 60,
    "scoreWeight": 1.0,
    "isVerified": true,
    "hasCodeBlock": true,
    "showCalculator": false,
    "allowSkip": false,
    "showOnReviewScreen": true
  },
  {
    "id": "sd_018",
    "type": "mcq",
    "question": "Which SQL index supports fast point lookups?",
    "options": ["Hash index", "Full-text index", "Bitmap index", "Clustered index"],
    "correctAnswer": "Hash index",
    "explanation": "Hash indexes offer average O(1) fetch for exact matches.",
    "domain": "databases",
    "careerTags": ["database_admin", "software_developer"],
    "conceptTags": ["databases"],
    "skillTags": ["tool familiarity"],
    "difficulty": "Medium",
    "format": "text",
    "answerType": "single-choice",
    "timeLimitSeconds": 45,
    "scoreWeight": 1.0,
    "isVerified": true,
    "hasCodeBlock": false,
    "showCalculator": false,
    "allowSkip": false,
    "showOnReviewScreen": true
  },
  {
    "id": "sd_019",
    "type": "scenario",
    "question": "You detect a DDoS attack. What’s the first action?",
    "options": ["Ignore", "Scale up servers", "Enable rate-limiting & blackholing", "Restart service"],
    "correctAnswer": "Enable rate-limiting & blackholing",
    "explanation": "Rate-limiting and blackholing helps block attack traffic early.",
    "domain": "cybersecurity",
    "careerTags": ["cybersecurity_analyst", "dev_ops_engineer"],
    "conceptTags": ["DDoS", "network security"],
    "skillTags": ["problem-solving"],
    "difficulty": "Hard",
    "format": "text",
    "answerType": "single-choice",
    "timeLimitSeconds": 60,
    "scoreWeight": 1.0,
    "isVerified": true,
    "hasCodeBlock": false,
    "showCalculator": false,
    "allowSkip": false,
    "showOnReviewScreen": true
  },
  {
    "id": "sd_020",
    "type": "mcq",
    "question": "Which metric evaluates a classifier’s performance across thresholds?",
    "options": ["MSE", "ROC AUC", "Accuracy", "Recall"],
    "correctAnswer": "ROC AUC",
    "explanation": "ROC AUC considers performance at all classification thresholds.",
    "domain": "machine learning",
    "careerTags": ["ml_engineer", "data_analyst"],
    "conceptTags": ["ML evaluation"],
    "skillTags": ["data analysis"],
    "difficulty": "Medium",
    "format": "text",
    "answerType": "single-choice",
    "timeLimitSeconds": 45,
    "scoreWeight": 1.0,
    "isVerified": true,
    "hasCodeBlock": false,
    "showCalculator": false,
    "allowSkip": false,
    "showOnReviewScreen": true
  },
  {
    "id": "sd_021",
    "type": "output",
    "question": "What does this JS code print?\n```js\nconsole.log(typeof NaN);\n```",
    "correctAnswer": "number",
    "explanation": "`typeof NaN` is 'number' in JavaScript.",
    "domain": "tool familiarity",
    "careerTags": ["software_developer"],
    "conceptTags": ["JavaScript"],
    "skillTags": ["debugging"],
    "difficulty": "Medium",
    "format": "code",
    "answerType": "short-text",
    "timeLimitSeconds": 30,
    "scoreWeight": 1.0,
    "isVerified": true,
    "hasCodeBlock": true,
    "showCalculator": false,
    "allowSkip": false,
    "showOnReviewScreen": true
  },
  {
    "id": "sd_022",
    "type": "mcq",
    "question": "What is polymorphism in OOP?",
    "options": [
      "Same method name, different implementations",
      "Data hiding",
      "Structuring data",
      "Interface inheritance"
    ],
    "correctAnswer": "Same method name, different implementations",
    "explanation": "Polymorphism allows methods to have different implementations across classes while sharing the same name .",
    "domain": "OOP",
    "careerTags": ["software_developer"],
    "conceptTags": ["OOP"],
    "skillTags": ["conceptual"],
    "difficulty": "Easy",
    "format": "text",
    "answerType": "single-choice",
    "timeLimitSeconds": 45,
    "scoreWeight": 1.0,
    "isVerified": true,
    "hasCodeBlock": false,
    "showCalculator": false,
    "allowSkip": false,
    "showOnReviewScreen": true
  },
  {
    "id": "sd_023",
    "type": "mcq",
    "question": "Which HTTP method is idempotent and safe?",
    "options": ["POST", "PUT", "GET", "DELETE"],
    "correctAnswer": "GET",
    "explanation": "GET is considered both safe and idempotent—it retrieves data without side effects .",
    "domain": "os/networks",
    "careerTags": ["cloud_engineer", "software_developer"],
    "conceptTags": ["networking"],
    "skillTags": ["software engineering"],
    "difficulty": "Easy",
    "format": "text",
    "answerType": "single-choice",
    "timeLimitSeconds": 30,
    "scoreWeight": 1.0,
    "isVerified": true,
    "hasCodeBlock": false,
    "showCalculator": false,
    "allowSkip": false,
    "showOnReviewScreen": true
  },
  {
    "id": "sd_024",
    "type": "debug",
    "question": "Fix the off-by-one bug:\n`for(int i=0; i<=arr.length; i++) use(arr[i]);`",
    "correctAnswer": "Change `<=` to `<` to prevent out-of-bounds access",
    "explanation": "Using `< length` ensures the loop iterates only within array bounds .",
    "domain": "debugging",
    "careerTags": ["software_developer"],
    "conceptTags": ["off-by-one", "loops"],
    "skillTags": ["debugging"],
    "difficulty": "Easy",
    "format": "text",
    "answerType": "short-text",
    "timeLimitSeconds": 30,
    "scoreWeight": 1.0,
    "isVerified": true,
    "hasCodeBlock": false,
    "showCalculator": false,
    "allowSkip": false,
    "showOnReviewScreen": true
  },
  {
    "id": "sd_025",
    "type": "mcq",
    "question": "Which algorithm prevents deadlock by enforcing safe resource allocation?",
    "options": [
      "Banker’s algorithm",
      "Round Robin",
      "FCFS",
      "Shortest Job First"
    ],
    "correctAnswer": "Banker’s algorithm",
    "explanation": "Banker’s algorithm simulates allocations and only approves those that keep the system in a safe state .",
    "domain": "os/networks",
    "careerTags": ["dev_ops_engineer"],
    "conceptTags": ["deadlock"],
    "skillTags": ["conceptual"],
    "difficulty": "Hard",
    "format": "text",
    "answerType": "single-choice",
    "timeLimitSeconds": 50,
    "scoreWeight": 1.0,
    "isVerified": true,
    "hasCodeBlock": false,
    "showCalculator": false,
    "allowSkip": false,
    "showOnReviewScreen": true
  },
  {
    "id": "sd_026",
    "type": "mcq",
    "question": "What does 'Infrastructure as Code' (IaC) enable in DevOps?",
    "options": ["Manual server config", "Automated, version-controlled provisioning", "Deploy-time monitoring only", "Ad hoc scripting"],
    "correctAnswer": "Automated, version-controlled provisioning",
    "explanation": "IaC automates and versions infrastructure setup—repeatably provision environments :contentReference[oaicite:1]{index=1}.",
    "domain": "cloud",
    "careerTags": ["dev_ops_engineer","cloud_engineer"],
    "conceptTags": ["IaC"],
    "skillTags": ["tool familiarity"],
    "difficulty": "Medium",
    "format": "text",
    "answerType": "single-choice",
    "timeLimitSeconds": 45,
    "scoreWeight": 1.0,
    "isVerified": true,
    "hasCodeBlock": false,
    "showCalculator": false,
    "allowSkip": false,
    "showOnReviewScreen": true
  },
  {
    "id": "sd_027",
    "type": "scenario",
    "question": "CI/CD pipelines fail intermittently due to flaky tests. Best remediation?",
    "options": ["Ignore failures", "Remove flaky tests", "Isolate flaky tests in staging", "Merge everything"],
    "correctAnswer": "Isolate flaky tests in staging",
    "explanation": "Isolating flaky tests avoids false failures in production pipelines.",
    "domain": "software engineering",
    "careerTags": ["dev_ops_engineer","cloud_engineer"],
    "conceptTags": ["CI/CD"],
    "skillTags": ["problem-solving"],
    "difficulty": "Hard",
    "format": "text",
    "answerType": "single-choice",
    "timeLimitSeconds": 60,
    "scoreWeight": 1.0,
    "isVerified": true,
    "hasCodeBlock": false,
    "showCalculator": false,
    "allowSkip": false,
    "showOnReviewScreen": true
  },
  {
    "id": "sd_028",
    "type": "scenario",
    "question": "You detect a DDoS attack. What’s the first action?",
    "options": ["Ignore", "Scale up servers", "Enable rate-limiting & blackholing", "Restart service"],
    "correctAnswer": "Enable rate-limiting & blackholing",
    "explanation": "Blocking malicious traffic early mitigates the attack effect.",
    "domain": "cybersecurity",
    "careerTags": ["cybersecurity_analyst","dev_ops_engineer"],
    "conceptTags": ["DDoS"],
    "skillTags": ["problem-solving"],
    "difficulty": "Hard",
    "format": "text",
    "answerType": "single-choice",
    "timeLimitSeconds": 60,
    "scoreWeight": 1.0,
    "isVerified": true,
    "hasCodeBlock": false,
    "showCalculator": false,
    "allowSkip": false,
    "showOnReviewScreen": true
  },
  {
    "id": "sd_029",
    "type": "mcq",
    "question": "Which approach offers immutable infrastructure benefits?",
    "options": ["In-place updates", "Replace-and-redeploy model", "Manual fixes", "Ephemeral infra"],
    "correctAnswer": "Replace-and-redeploy model",
    "explanation": "Immutable infra uses fresh deployments rather than in-place changes :contentReference[oaicite:2]{index=2}.",
    "domain": "cloud",
    "careerTags": ["cloud_engineer","software_developer"],
    "conceptTags": ["Immutable infra"],
    "skillTags": ["conceptual"],
    "difficulty": "Hard",
    "format": "text",
    "answerType": "single-choice",
    "timeLimitSeconds": 45,
    "scoreWeight": 1.0,
    "isVerified": true,
    "hasCodeBlock": false,
    "showCalculator": false,
    "allowSkip": false,
    "showOnReviewScreen": true
  },
  {
    "id": "sd_030",
    "type": "mcq",
    "question": "What is the SOLID 'D' principle?",
    "options": ["Dependency Inversion", "Data Encapsulation", "Dynamic Typing", "Direct Coupling"],
    "correctAnswer": "Dependency Inversion",
    "explanation": "The 'D' principle encourages high-level modules not depend on low-level modules directly.",
    "domain": "software engineering",
    "careerTags": ["software_developer"],
    "conceptTags": ["SOLID"],
    "skillTags": ["conceptual"],
    "difficulty": "Medium",
    "format": "text",
    "answerType": "single-choice",
    "timeLimitSeconds": 40,
    "scoreWeight": 1.0,
    "isVerified": true,
    "hasCodeBlock": false,
    "showCalculator": false,
    "allowSkip": false,
    "showOnReviewScreen": true
  },
  {
    "id": "sd_031",
    "type": "mcq",
    "question": "Which condition is NOT required for deadlock?",
    "options": ["Mutual exclusion","Hold and wait","Circular wait","Preemption"],
    "correctAnswer": "Preemption",
    "explanation": "Deadlock requires absence of preemption—not its presence :contentReference[oaicite:3]{index=3}.",
    "domain": "os/networks",
    "careerTags": ["dev_ops_engineer"],
    "conceptTags": ["deadlock"],
    "skillTags": ["conceptual"],
    "difficulty": "Hard",
    "format": "text",
    "answerType": "single-choice",
    "timeLimitSeconds": 50,
    "scoreWeight": 1.0,
    "isVerified": true,
    "hasCodeBlock": false,
    "showCalculator": false,
    "allowSkip": false,
    "showOnReviewScreen": true
  },
  {
    "id": "sd_032",
    "type": "mcq",
    "question": "What does ACID 'I' stand for?",
    "options": ["Isolation","Indexing","Integrity","Iteration"],
    "correctAnswer": "Isolation",
    "explanation": "ACID's 'I' is Isolation, ensuring transaction integrity.",
    "domain": "databases",
    "careerTags": ["database_admin"],
    "conceptTags": ["ACID"],
    "skillTags": ["conceptual"],
    "difficulty": "Medium",
    "format": "text",
    "answerType": "single-choice",
    "timeLimitSeconds": 30,
    "scoreWeight": 1.0,
    "isVerified": true,
    "hasCodeBlock": false,
    "showCalculator": false,
    "allowSkip": false,
    "showOnReviewScreen": true
  },
  {
    "id": "sd_033",
    "type": "output",
    "question": "What does this Python code print?\n```python\nimport numpy as np\nprint(np.arange(2,10,2))\n```",
    "correctAnswer": "[2 4 6 8]",
    "explanation": "np.arange(start,stop,step) prints even numbers between 2 and 8.",
    "domain": "tool familiarity",
    "careerTags": ["ml_engineer"],
    "conceptTags": ["NumPy"],
    "skillTags": ["problem-solving"],
    "difficulty": "Medium",
    "format": "code",
    "answerType": "short-text",
    "timeLimitSeconds": 40,
    "scoreWeight": 1.0,
    "isVerified": true,
    "hasCodeBlock": true,
    "showCalculator": false,
    "allowSkip": false,
    "showOnReviewScreen": true
  },
  {
    "id": "sd_034",
    "type": "mcq",
    "question": "Which plot best shows classifier threshold tradeoff?",
    "options": ["Precision-Recall Curve","Mean Absolute Error","Log-Loss","RMSE"],
    "correctAnswer": "Precision-Recall Curve",
    "explanation": "PR curve shows precision versus recall variation with threshold.",
    "domain": "machine learning",
    "careerTags": ["ml_engineer","data_analyst"],
    "conceptTags": ["ML evaluation"],
    "skillTags": ["data analysis"],
    "difficulty": "Easy",
    "format": "text",
    "answerType": "single-choice",
    "timeLimitSeconds": 35,
    "scoreWeight": 1.0,
    "isVerified": true,
    "hasCodeBlock": false,
    "showCalculator": false,
    "allowSkip": false,
    "showOnReviewScreen": true
  },
  {
    "id": "sd_035",
    "type": "scenario",
    "question": "Imputing missing values in time-series: best method?",
    "options": ["Linear interpolation","Random values","Delete rows","Use zeros"],
    "correctAnswer": "Linear interpolation",
    "explanation": "Linear interpolation preserves trends and temporal continuity.",
    "domain": "data analysis",
    "careerTags": ["data_analyst"],
    "conceptTags": ["data cleaning"],
    "skillTags": ["problem-solving"],
    "difficulty": "Hard",
    "format": "text",
    "answerType": "single-choice",
    "timeLimitSeconds": 45,
    "scoreWeight": 1.0,
    "isVerified": true,
    "hasCodeBlock": false,
    "showCalculator": false,
    "allowSkip": false,
    "showOnReviewScreen": true
  },
  {
    "id": "sd_036",
    "type": "debug",
    "question": "SQL UPDATE without WHERE affects all rows—what’s wrong?",
    "correctAnswer": "Missing WHERE clause to restrict affected rows.",
    "explanation": "UPDATE without WHERE applies change across all records.",
    "domain": "databases",
    "careerTags": ["database_admin"],
    "conceptTags": ["SQL"],
    "skillTags": ["debugging"],
    "difficulty": "Medium",
    "format": "text",
    "answerType": "short-text",
    "timeLimitSeconds": 50,
    "scoreWeight": 1.0,
    "isVerified": true,
    "hasCodeBlock": false,
    "showCalculator": false,
    "allowSkip": false,
    "showOnReviewScreen": true
  },
  {
    "id": "sd_037",
    "type": "mcq",
    "question": "Which CI/CD practice supports microservices best?",
    "options": ["Single pipeline","Isolated pipelines per service","Manual deploy only","No versioning"],
    "correctAnswer": "Isolated pipelines per service",
    "explanation": "Service-specific pipelines improve scalability & independence :contentReference[oaicite:4]{index=4}.",
    "domain": "software engineering",
    "careerTags": ["cloud_engineer","dev_ops_engineer"],
    "conceptTags": ["CI/CD"],
    "skillTags": ["software engineering"],
    "difficulty": "Medium",
    "format": "text",
    "answerType": "single-choice",
    "timeLimitSeconds": 45,
    "scoreWeight": 1.0,
    "isVerified": true,
    "hasCodeBlock": false,
    "showCalculator": false,
    "allowSkip": false,
    "showOnReviewScreen": true
  },
  {
    "id": "sd_038",
    "type": "scenario",
    "question": "Code review finds duplicated logic across modules. Action?",
    "options": ["Ignore","Refactor into shared function","Copy more code","Delete logic"],
    "correctAnswer": "Refactor into shared function",
    "explanation": "Refactoring removes duplication & improves maintainability.",
    "domain": "software engineering",
    "careerTags": ["software_developer"],
    "conceptTags": ["refactoring"],
    "skillTags": ["software engineering"],
    "difficulty": "Medium",
    "format": "text",
    "answerType": "single-choice",
    "timeLimitSeconds": 40,
    "scoreWeight": 1.0,
    "isVerified": true,
    "hasCodeBlock": false,
    "showCalculator": false,
    "allowSkip": false,
    "showOnReviewScreen": true
  },
  {
    "id": "sd_039",
    "type": "mcq",
    "question": "In JavaScript, which operator compares both type and value?",
    "options": ["==","===","=","typeof"],
    "correctAnswer": "===",
    "explanation": "=== enforces strict equality—checking value and type.",
    "domain": "tool familiarity",
    "careerTags": ["software_developer"],
    "conceptTags": ["JavaScript"],
    "skillTags": ["tool familiarity"],
    "difficulty": "Easy",
    "format": "text",
    "answerType": "single-choice",
    "timeLimitSeconds": 30,
    "scoreWeight": 1.0,
    "isVerified": true,
    "hasCodeBlock": false,
    "showCalculator": false,
    "allowSkip": false,
    "showOnReviewScreen": true
  },
  {
    "id": "sd_040",
    "type": "output",
    "question": "What’s the Java output?\n```java\nList<Integer> l = List.of(1,2,3);\nSystem.out.println(l.stream().filter(x->x%2==0).count());\n```",
    "correctAnswer": "1",
    "explanation": "Only one even element (2), so count=1.",
    "domain": "tool familiarity",
    "careerTags": ["software_developer"],
    "conceptTags": ["Java Streams"],
    "skillTags": ["problem-solving"],
    "difficulty": "Hard",
    "format": "code",
    "answerType": "short-text",
    "timeLimitSeconds": 40,
    "scoreWeight": 1.0,
    "isVerified": true,
    "hasCodeBlock": true,
    "showCalculator": false,
    "allowSkip": false,
    "showOnReviewScreen": true
  },
  {
    "id": "sd_041",
    "type": "mcq",
    "question": "Which design pattern creates objects without specifying exact class?",
    "options": ["Singleton","Factory Method","Adapter","Prototype"],
    "correctAnswer": "Factory Method",
    "explanation": "Factory Method lets subclasses decide instance creation.",
    "domain": "software engineering",
    "careerTags": ["software_developer"],
    "conceptTags": ["design patterns"],
    "skillTags": ["conceptual"],
    "difficulty": "Medium",
    "format": "text",
    "answerType": "single-choice",
    "timeLimitSeconds": 40,
    "scoreWeight": 1.0,
    "isVerified": true,
    "hasCodeBlock": false,
    "showCalculator": false,
    "allowSkip": false,
    "showOnReviewScreen": true
  },
  {
    "id": "sd_042",
    "type": "scenario",
    "question": "Evaluating classifier across thresholds—best metric?",
    "options": ["Accuracy","ROC AUC","Recall","F1 Score"],
    "correctAnswer": "ROC AUC",
    "explanation": "ROC AUC measures ranking quality regardless of threshold.",
    "domain": "machine learning",
    "careerTags": ["ml_engineer","data_analyst"],
    "conceptTags": ["ML evaluation"],
    "skillTags": ["data analysis"],
    "difficulty": "Medium",
    "format": "text",
    "answerType": "single-choice",
    "timeLimitSeconds": 45,
    "scoreWeight": 1.0,
    "isVerified": true,
    "hasCodeBlock": false,
    "showCalculator": false,
    "allowSkip": false,
    "showOnReviewScreen": true
  },
  {
    "id": "sd_043",
    "type": "debug",
    "question": "JS bug: using `var` in a loop with async callback leads to shared index. Fix?",
    "correctAnswer": "Use `let` or closures to capture per-iteration index.",
    "explanation": "`var` is function-scoped; `let` or closure ensures each iteration has its own index.",
    "domain": "frontend",
    "careerTags": ["software_developer"],
    "conceptTags": ["JavaScript","async"],
    "skillTags": ["debugging"],
    "difficulty": "Medium",
    "format": "text",
    "answerType": "short-text",
    "timeLimitSeconds": 45,
    "scoreWeight": 1.0,
    "isVerified": true,
    "hasCodeBlock": false,
    "showCalculator": false,
    "allowSkip": false,
    "showOnReviewScreen": true
  },
  {
    "id": "sd_044",
    "type": "mcq",
    "question": "Which helps detect anomaly in CI/CD security?",
    "options": ["Static analysis","Behavior profiling","Ignore logs","Manual review"],
    "correctAnswer": "Behavior profiling",
    "explanation": "Behavior profiling catches unusual patterns beyond static checks.",
    "domain": "cybersecurity",
    "careerTags": ["cybersecurity_analyst"],
    "conceptTags": ["security"],
    "skillTags": ["tool familiarity"],
    "difficulty": "Hard",
    "format": "text",
    "answerType": "single-choice",
    "timeLimitSeconds": 45,
    "scoreWeight": 1.0,
    "isVerified": true,
    "hasCodeBlock": false,
    "showCalculator": false,
    "allowSkip": false,
    "showOnReviewScreen": true
  },
  {
    "id": "sd_045",
    "type": "scenario",
    "question": "Service logs spike—what’s the fix?",
    "options": ["Log everything","Set sampling & retention","Disable logging","Print to console"],
    "correctAnswer": "Set sampling & retention",
    "explanation": "Sampling limits volume and retention manages storage costs.",
    "domain": "cloud",
    "careerTags": ["cloud_engineer","dev_ops_engineer"],
    "conceptTags": ["logging"],
    "skillTags": ["software engineering"],
    "difficulty": "Hard",
    "format": "text",
    "answerType": "single-choice",
    "timeLimitSeconds": 50,
    "scoreWeight": 1.0,
    "isVerified": true,
    "hasCodeBlock": false,
    "showCalculator": false,
    "allowSkip": false,
    "showOnReviewScreen": true
  },
  {
    "id": "sd_046",
    "type": "mcq",
    "question": "Which OS scheduler may cause starvation?",
    "options": ["Round Robin","FCFS","Shortest Job First","Priority Scheduling"],
    "correctAnswer": "Shortest Job First",
    "explanation": "SJF optimizes throughput but may starve long tasks.",
    "domain": "os/networks",
    "careerTags": ["dev_ops_engineer"],
    "conceptTags": ["scheduling"],
    "skillTags": ["problem-solving"],
    "difficulty": "Easy",
    "format": "text",
    "answerType": "single-choice",
    "timeLimitSeconds": 30,
    "scoreWeight": 1.0,
    "isVerified": true,
    "hasCodeBlock": false,
    "showCalculator": false,
    "allowSkip": false,
    "showOnReviewScreen": true
  },
  {
    "id": "sd_047",
    "type": "output",
    "question": "JS output?\n```js\nconsole.log([...'hello'].reverse().join(''));\n```",
    "correctAnswer": "olleh",
    "explanation": "Converts string to array, reverses it, and joins back.",
    "domain": "tool familiarity",
    "careerTags": ["software_developer"],
    "conceptTags": ["JavaScript"],
    "skillTags": ["problem-solving"],
    "difficulty": "Medium",
    "format": "code",
    "answerType": "short-text",
    "timeLimitSeconds": 40,
    "scoreWeight": 1.0,
    "isVerified": true,
    "hasCodeBlock": true,
    "showCalculator": false,
    "allowSkip": false,
    "showOnReviewScreen": true
  },
  {
    "id": "sd_048",
    "type": "mcq",
    "question": "Partial AUC focuses on classifier performance on?",
    "options": ["All thresholds","Low false-positive zone","High recall","Training error only"],
    "correctAnswer": "Low false-positive zone",
    "explanation": "Partial AUC analyzes performance in regions of low false positives.",
    "domain": "machine learning",
    "careerTags": ["ml_engineer","data_analyst"],
    "conceptTags": ["ML evaluation"],
    "skillTags": ["data analysis"],
    "difficulty": "Hard",
    "format": "text",
    "answerType": "single-choice",
    "timeLimitSeconds": 50,
    "scoreWeight": 1.0,
    "isVerified": true,
    "hasCodeBlock": false,
    "showCalculator": false,
    "allowSkip": false,
    "showOnReviewScreen": true
  },
  {
    "id": "sd_049",
    "type": "scenario",
    "question": "Your model is overfitting. What’s a good fix?",
    "options": ["Increase model size","Add regularization/dropout","Remove training data","Disable validation"],
    "correctAnswer": "Add regularization/dropout",
    "explanation": "Regularization reduces overfitting by limiting weights.",
    "domain": "machine learning",
    "careerTags": ["ml_engineer","data_analyst"],
    "conceptTags": ["regularization"],
    "skillTags": ["problem-solving"],
    "difficulty": "Medium",
    "format": "text",
    "answerType": "single-choice",
    "timeLimitSeconds": 45,
    "scoreWeight": 1.0,
    "isVerified": true,
    "hasCodeBlock": false,
    "showCalculator": false,
    "allowSkip": false,
    "showOnReviewScreen": true
  },
  {
    "id": "sd_050",
    "type": "mcq",
    "question": "Which SQL index is best for full-text search?",
    "options": ["Hash index","Full-text index","Bitmap index","Clustered index"],
    "correctAnswer": "Full-text index",
    "explanation": "Full-text indexes are optimized for searching natural-language text.",
    "domain": "databases",
    "careerTags": ["database_admin","software_developer"],
    "conceptTags": ["full-text search"],
    "skillTags": ["tool familiarity"],
    "difficulty": "Medium",
    "format": "text",
    "answerType": "single-choice",
    "timeLimitSeconds": 45,
    "scoreWeight": 1.0,
    "isVerified": true,
    "hasCodeBlock": false,
    "showCalculator": false,
    "allowSkip": false,
    "showOnReviewScreen": true
  }
]
