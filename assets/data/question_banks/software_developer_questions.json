[
  {
    "id": "sd_001",
    "type": "mcq",
    "question": "What’s the time complexity of searching for an item in a balanced binary search tree?",
    "options": ["O(log n)", "O(n)", "O(1)", "O(n log n)"],
    "correctAnswer": "O(log n)",
    "explanation": "Balanced BST operations run in O(log n) time :contentReference[oaicite:1]{index=1}.",
    "domain": "Data Structures & Algorithms",
    "careerTags": ["software_developer"],
    "conceptTags": ["arrays","sorting"],
    "skillTags": ["problem‑solving"],
    "difficulty": "Easy",
    "format": "text",
    "answerType": "single‑choice",
    "timeLimitSeconds": 30,
    "scoreWeight": 1.0,
    "isVerified": true,
    "hasCodeBlock": false,
    "showCalculator": false,
    "allowSkip": false,
    "showOnReviewScreen": true
  },
  {
    "id": "sd_002",
    "type": "mcq",
    "question": "In OOP, what does polymorphism allow you to do?",
    "options": ["Use the same interface for different implementations", "Hide internal state", "Duplicate code", "Manage memory manually"],
    "correctAnswer": "Use the same interface for different implementations",
    "explanation": "Polymorphism enables different behaviors behind a common interface.",
    "domain": "OOP Concepts",
    "careerTags": ["software_developer"],
    "conceptTags": ["inheritance","polymorphism"],
    "skillTags": ["conceptual"],
    "difficulty": "Easy",
    "format": "text",
    "answerType": "single‑choice",
    "timeLimitSeconds": 30,
    "scoreWeight": 1.0,
    "isVerified": true,
    "hasCodeBlock": false,
    "showCalculator": false,
    "allowSkip": false,
    "showOnReviewScreen": true
  },
  {
    "id": "sd_003",
    "type": "mcq",
    "question": "Which HTTP method is safest and idempotent for reading data?",
    "options": ["GET", "POST", "PUT", "DELETE"],
    "correctAnswer": "GET",
    "explanation": "GET retrieves data without changing state and can be called repeatedly.",
    "domain": "REST APIs",
    "careerTags": ["software_developer"],
    "conceptTags": ["HTTP methods","JSON"],
    "skillTags": ["software‑engineering"],
    "difficulty": "Easy",
    "format": "text",
    "answerType": "single‑choice",
    "timeLimitSeconds": 30,
    "scoreWeight": 1.0,
    "isVerified": true,
    "hasCodeBlock": false,
    "showCalculator": false,
    "allowSkip": false,
    "showOnReviewScreen": true
  },
  {
    "id": "sd_004",
    "type": "mcq",
    "question": "Which SOLID principle refers to separating responsibilities?",
    "options": ["Single Responsibility Principle", "Open/Closed Principle", "Liskov Substitution", "Dependency Inversion"],
    "correctAnswer": "Single Responsibility Principle",
    "explanation": "SRP means each class should have only one reason to change.",
    "domain": "Software Design Principles",
    "careerTags": ["software_developer"],
    "conceptTags": ["SOLID","DRY"],
    "skillTags": ["conceptual"],
    "difficulty": "Medium",
    "format": "text",
    "answerType": "single‑choice",
    "timeLimitSeconds": 35,
    "scoreWeight": 1.0,
    "isVerified": true,
    "hasCodeBlock": false,
    "showCalculator": false,
    "allowSkip": false,
    "showOnReviewScreen": true
  },
  {
    "id": "sd_005",
    "type": "mcq",
    "question": "Which Git command rewrites commits in your current branch?",
    "options": ["git rebase", "git merge", "git fetch", "git add"],
    "correctAnswer": "git rebase",
    "explanation": "Rebase reapplies commits onto a new base, altering history :contentReference[oaicite:2]{index=2}.",
    "domain": "Version Control (Git)",
    "careerTags": ["software_developer"],
    "conceptTags": ["branches","rebase"],
    "skillTags": ["tool familiarity"],
    "difficulty": "Medium",
    "format": "text",
    "answerType": "single‑choice",
    "timeLimitSeconds": 40,
    "scoreWeight": 1.0,
    "isVerified": true,
    "hasCodeBlock": false,
    "showCalculator": false,
    "allowSkip": false,
    "showOnReviewScreen": true
  },
  {
    "id": "sd_006",
    "type": "output",
    "question": "What does this Dart code print?\n```dart\nvar s = '';\nfor (var i = 0; i < 3; i++) s += i.toString();\nprint(s);\n```",
    "correctAnswer": "012",
    "explanation": "Loop concatenates '0','1','2' into the string.",
    "domain": "Programming Logic (Dart)",
    "careerTags": ["software_developer"],
    "conceptTags": ["loops","recursion"],
    "skillTags": ["problem‑solving"],
    "difficulty": "Easy",
    "format": "code",
    "answerType": "short‑text",
    "timeLimitSeconds": 60,
    "scoreWeight": 1.0,
    "isVerified": true,
    "hasCodeBlock": true,
    "showCalculator": false,
    "allowSkip": false,
    "showOnReviewScreen": true
  },
  {
    "id": "sd_007",
    "type": "output",
    "question": "What will this Java code print?\n```java\nSystem.out.println(null + \"string\");\n```",
    "correctAnswer": "nullstring",
    "explanation": "Concatenating null with a string yields \"nullstring\".",
    "domain": "Programming Logic (Java)",
    "careerTags": ["software_developer"],
    "conceptTags": ["syntax"],
    "skillTags": ["tool familiarity"],
    "difficulty": "Medium",
    "format": "code",
    "answerType": "short‑text",
    "timeLimitSeconds": 50,
    "scoreWeight": 1.0,
    "isVerified": true,
    "hasCodeBlock": true,
    "showCalculator": false,
    "allowSkip": false,
    "showOnReviewScreen": true
  },
  {
    "id": "sd_008",
    "type": "output",
    "question": "What’s the output of this JS code?\n```js\nconsole.log([1,2,3].map(x => x*2));\n```",
    "correctAnswer": "[2,4,6]",
    "explanation": "map() multiplies each number by 2.",
    "domain": "Development Tools",
    "careerTags": ["software_developer"],
    "conceptTags": ["syntax"],
    "skillTags": ["problem‑solving"],
    "difficulty": "Easy",
    "format": "code",
    "answerType": "short‑text",
    "timeLimitSeconds": 45,
    "scoreWeight": 1.0,
    "isVerified": true,
    "hasCodeBlock": true,
    "showCalculator": false,
    "allowSkip": false,
    "showOnReviewScreen": true
  },
  {
    "id": "sd_009",
    "type": "output",
    "question": "What exception does this Java code produce?\n```java\nString s = null; s.length();\n```",
    "correctAnswer": "NullPointerException",
    "explanation": "Calling a method on null throws NullPointerException at runtime.",
    "domain": "Debugging & Error Handling",
    "careerTags": ["software_developer"],
    "conceptTags": ["null safety","stack trace"],
    "skillTags": ["debugging"],
    "difficulty": "Medium",
    "format": "code",
    "answerType": "short‑text",
    "timeLimitSeconds": 45,
    "scoreWeight": 1.0,
    "isVerified": true,
    "hasCodeBlock": true,
    "showCalculator": false,
    "allowSkip": false,
    "showOnReviewScreen": true
  },
  {
    "id": "sd_010",
    "type": "output",
    "question": "What’s the output of this Dart recursion?\n```dart\nint fact(int n) => n<2 ? 1 : n*fact(n-1);\nprint(fact(4));\n```",
    "correctAnswer": "24",
    "explanation": "4! equals 24 by recursive multiplication.",
    "domain": "Programming Logic (Dart)",
    "careerTags": ["software_developer"],
    "conceptTags": ["recursion"],
    "skillTags": ["problem‑solving"],
    "difficulty": "Medium",
    "format": "code",
    "answerType": "short‑text",
    "timeLimitSeconds": 60,
    "scoreWeight": 1.0,
    "isVerified": true,
    "hasCodeBlock": true,
    "showCalculator": false,
    "allowSkip": false,
    "showOnReviewScreen": true
  },
  {
    "id": "sd_011",
    "type": "debug",
    "question": "Fix the Dart off‑by‑one:\n```dart\nList l = [1,2,3]; for(int i=0;i<=l.length;i++){ print(l[i]); }\n```",
    "correctAnswer": "Use i < l.length",
    "explanation": "Index goes out of range; last valid index is length‑1.",
    "domain": "Programming Logic (Dart)",
    "careerTags": ["software_developer"],
    "conceptTags": ["loops","debugging"],
    "skillTags": ["debugging"],
    "difficulty": "Easy",
    "format": "code",
    "answerType": "short‑text",
    "timeLimitSeconds": 60,
    "scoreWeight": 1.0,
    "isVerified": true,
    "hasCodeBlock": true,
    "showCalculator": false,
    "allowSkip": false,
    "showOnReviewScreen": true
  },
  {
    "id": "sd_012",
    "type": "debug",
    "question": "Fix Java null safety:\n```java\nList<String> lst = null; System.out.println(lst.size());\n```",
    "correctAnswer": "Check lst for null before size() call",
    "explanation": "Avoid NullPointerException by adding a null check.",
    "domain": "Debugging & Error Handling",
    "careerTags": ["software_developer"],
    "conceptTags": ["null safety"],
    "skillTags": ["debugging"],
    "difficulty": "Medium",
    "format": "code",
    "answerType": "short‑text",
    "timeLimitSeconds": 60,
    "scoreWeight": 1.0,
    "isVerified": true,
    "hasCodeBlock": true,
    "showCalculator": false,
    "allowSkip": false,
    "showOnReviewScreen": true
  },
  {
    "id": "sd_013",
    "type": "debug",
    "question": "Fix Dart type mismatch:\n```dart\nint x = '5';\n```",
    "correctAnswer": "Use int.parse('5') to convert string to int",
    "explanation": "You can’t assign a String to an int; use `int.parse()` to convert it :contentReference[oaicite:1]{index=1}.",
    "domain": "Programming Logic (Dart)",
    "careerTags": ["software_developer"],
    "conceptTags": ["type safety"],
    "skillTags": ["debugging"],
    "difficulty": "Medium",
    "format": "code",
    "answerType": "short-text",
    "timeLimitSeconds": 60,
    "scoreWeight": 1.0,
    "isVerified": true,
    "hasCodeBlock": true,
    "showCalculator": false,
    "allowSkip": false,
    "showOnReviewScreen": true
  },
  {
    "id": "sd_014",
    "type": "debug",
    "question": "Fix Dart async bug:\n```dart\nvar a = Future.value(5);\nprint(a);\n```",
    "correctAnswer": "Await the future: `print(await Future.value(5));` or use `.then()`",
    "explanation": "Without `await`, you're printing the Future instance, not its value :contentReference[oaicite:2]{index=2}.",
    "domain": "Debugging & Error Handling",
    "careerTags": ["software_developer"],
    "conceptTags": ["async/await"],
    "skillTags": ["debugging"],
    "difficulty": "Medium",
    "format": "code",
    "answerType": "short-text",
    "timeLimitSeconds": 60,
    "scoreWeight": 1.0,
    "isVerified": true,
    "hasCodeBlock": true,
    "showCalculator": false,
    "allowSkip": false,
    "showOnReviewScreen": true
  },
  {
    "id": "sd_015",
    "type": "debug",
    "question": "Fix Java off‑by‑one:\n```java\nfor(int i=0;i<=arr.length;i++) foo(arr[i]);\n```",
    "correctAnswer": "Change `<= arr.length` to `< arr.length`",
    "explanation": "Valid indices are 0 to length‑1; `<=` causes out‑of‑bounds exception.",
    "domain": "Programming Logic (Java)",
    "careerTags": ["software_developer"],
    "conceptTags": ["loops","debugging"],
    "skillTags": ["debugging"],
    "difficulty": "Easy",
    "format": "code",
    "answerType": "short-text",
    "timeLimitSeconds": 60,
    "scoreWeight": 1.0,
    "isVerified": true,
    "hasCodeBlock": true,
    "showCalculator": false,
    "allowSkip": false,
    "showOnReviewScreen": true
  },
  {
    "id": "sd_016",
    "type": "scenario",
    "question": "Your REST POST handler throws a 500 on invalid JSON. What should be the correct response?",
    "options": ["500 Internal Server Error", "400 Bad Request", "404 Not Found", "200 OK with error field"],
    "correctAnswer": "400 Bad Request",
    "explanation": "Invalid client input should return 400, not server error.",
    "domain": "REST APIs",
    "careerTags": ["software_developer"],
    "conceptTags": ["HTTP", "error handling"],
    "skillTags": ["software engineering"],
    "difficulty": "Medium",
    "format": "text",
    "answerType": "single-choice",
    "timeLimitSeconds": 50,
    "scoreWeight": 1.0,
    "isVerified": true,
    "hasCodeBlock": false,
    "showCalculator": false,
    "allowSkip": false,
    "showOnReviewScreen": true
  },
  {
    "id": "sd_017",
    "type": "scenario",
    "question": "CI build fails due to lint issues. What’s your next step?",
    "options": ["Ignore and merge", "Fix lint errors", "Disable linting", "Merge with warnings"],
    "correctAnswer": "Fix lint errors",
    "explanation": "Lint rules help maintain code quality—errors should be resolved before merging.",
    "domain": "Build & Deployment",
    "careerTags": ["software_developer"],
    "conceptTags": ["CI/CD", "code quality"],
    "skillTags": ["software engineering"],
    "difficulty": "Medium",
    "format": "text",
    "answerType": "single-choice",
    "timeLimitSeconds": 45,
    "scoreWeight": 1.0,
    "isVerified": true,
    "hasCodeBlock": false,
    "showCalculator": false,
    "allowSkip": false,
    "showOnReviewScreen": true
  },
  {
    "id": "sd_018",
    "type": "scenario",
    "question": "You merge a branch and detect a logic bug post‑deploy. Best reaction?",
    "options": ["Revert immediately", "Patch in prod", "Wait for report", "Ignore"],
    "correctAnswer": "Revert immediately",
    "explanation": "Reverting prevents further issues before root cause can be safely patched.",
    "domain": "Software Design Principles",
    "careerTags": ["software_developer"],
    "conceptTags": ["release management"],
    "skillTags": ["problem-solving"],
    "difficulty": "Hard",
    "format": "text",
    "answerType": "single-choice",
    "timeLimitSeconds": 60,
    "scoreWeight": 1.0,
    "isVerified": true,
    "hasCodeBlock": false,
    "showCalculator": false,
    "allowSkip": false,
    "showOnReviewScreen": true
  },
  {
    "id": "sd_019",
    "type": "scenario",
    "question": "Unit tests are flaky in CI. You should:",
    "options": ["Mark as passed", "Isolate flaky tests", "Remove all tests", "Ignore failures"],
    "correctAnswer": "Isolate flaky tests",
    "explanation": "Flaky tests should be isolated and fixed to maintain reliable CI.",
    "domain": "Testing",
    "careerTags": ["software_developer"],
    "conceptTags": ["unit test"],
    "skillTags": ["software engineering"],
    "difficulty": "Medium",
    "format": "text",
    "answerType": "single-choice",
    "timeLimitSeconds": 45,
    "scoreWeight": 1.0,
    "isVerified": true,
    "hasCodeBlock": false,
    "showCalculator": false,
    "allowSkip": false,
    "showOnReviewScreen": true
  },
  {
    "id": "sd_020",
    "type": "scenario",
    "question": "Need to mock a network call during widget test. You would:",
    "options": ["Real HTTP", "Mockito", "Manual JSON", "Skip test"],
    "correctAnswer": "Mockito",
    "explanation": "Mockito allows structured mocking in tests without hitting real endpoints.",
    "domain": "Testing",
    "careerTags": ["software_developer"],
    "conceptTags": ["widget test","mocking"],
    "skillTags": ["software engineering"],
    "difficulty": "Medium",
    "format": "text",
    "answerType": "single-choice",
    "timeLimitSeconds": 45,
    "scoreWeight": 1.0,
    "isVerified": true,
    "hasCodeBlock": false,
    "showCalculator": false,
    "allowSkip": false,
    "showOnReviewScreen": true
  },
  {
    "id": "sd_021",
    "type": "short-answer",
    "question": "Explain how Git branching works and why it's useful.",
    "correctAnswer": "Branches isolate features; master/main stays stable; merging integrates work cleanly",
    "explanation": "Branching allows parallel development while keeping mainline safe.",
    "domain": "Version Control (Git)",
    "careerTags": ["software_developer"],
    "conceptTags": ["branches"],
    "skillTags": ["conceptual"],
    "difficulty": "Medium",
    "format": "text",
    "answerType": "short-text",
    "timeLimitSeconds": 120,
    "scoreWeight": 1.0,
    "isVerified": true,
    "hasCodeBlock": false,
    "showCalculator": false,
    "allowSkip": false,
    "showOnReviewScreen": true
  },
  {
    "id": "sd_022",
    "type": "short-answer",
    "question": "Describe the DRY principle and give a Dart code example.",
    "correctAnswer": "Don't Repeat Yourself: abstract repeated logic into reusable methods",
    "explanation": "DRY promotes maintainability by avoiding duplicate code.",
    "domain": "Software Design Principles",
    "careerTags": ["software_developer"],
    "conceptTags": ["DRY"],
    "skillTags": ["conceptual"],
    "difficulty": "Medium",
    "format": "text",
    "answerType": "short-text",
    "timeLimitSeconds": 120,
    "scoreWeight": 1.0,
    "isVerified": true,
    "hasCodeBlock": false,
    "showCalculator": false,
    "allowSkip": false,
    "showOnReviewScreen": true
  },
  {
    "id": "sd_023",
    "type": "short-answer",
    "question": "How do you handle null safety in Dart?",
    "correctAnswer": "Use nullable types (?), `!`, `??`, and null-aware operators to guard runtime errors.",
    "explanation": "Dart's null safety prevents null errors via compile-time checks and syntax.",
    "domain": "Programming Logic (Dart)",
    "careerTags": ["software_developer"],
    "conceptTags": ["null safety"],
    "skillTags": ["conceptual"],
    "difficulty": "Medium",
    "format": "text",
    "answerType": "short-text",
    "timeLimitSeconds": 120,
    "scoreWeight": 1.0,
    "isVerified": true,
    "hasCodeBlock": false,
    "showCalculator": false,
    "allowSkip": false,
    "showOnReviewScreen": true
  },
  {
    "id": "sd_024",
    "type": "short-answer",
    "question": "Explain CI/CD and why it's important in modern development.",
    "correctAnswer": "CI/CD automates build/test/deploy, reducing manual errors and speeding up delivery.",
    "explanation": "CI/CD pipeline ensures quality and fast feedback cycles.",
    "domain": "Build & Deployment",
    "careerTags": ["software_developer"],
    "conceptTags": ["CI/CD"],
    "skillTags": ["conceptual"],
    "difficulty": "Medium",
    "format": "text",
    "answerType": "short-text",
    "timeLimitSeconds": 120,
    "scoreWeight": 1.0,
    "isVerified": true,
    "hasCodeBlock": false,
    "showCalculator": false,
    "allowSkip": false,
    "showOnReviewScreen": true
  },
  {
    "id": "sd_025",
    "type": "short-answer",
    "question": "What are unit tests and widget tests in Flutter? When would you use each?",
    "correctAnswer": "Unit tests verify small logic in isolation; widget tests check UI component behavior.",
    "explanation": "Unit tests are fast and isolated; widget tests ensure UI correctness.",
    "domain": "Testing",
    "careerTags": ["software_developer"],
    "conceptTags": ["unit test","widget test"],
    "skillTags": ["conceptual"],
    "difficulty": "Hard",
    "format": "text",
    "answerType": "short-text",
    "timeLimitSeconds": 120,
    "scoreWeight": 1.0,
    "isVerified": true,
    "hasCodeBlock": false,
    "showCalculator": false,
    "allowSkip": false,
    "showOnReviewScreen": true
  },
  {
    "id": "sd_026",
    "type": "mcq",
    "question": "What is the primary difference between `git merge` and `git rebase`?",
    "options": [
      "Merge preserves history, rebase rewrites it",
      "Merge rewrites history, rebase preserves it",
      "Both always preserve history",
      "Both always rewrite history"
    ],
    "correctAnswer": "Merge preserves history, rebase rewrites it",
    "explanation": "Merge creates a merge commit and preserves branch history; rebase moves commits onto a new base, rewriting history :contentReference[oaicite:1]{index=1}.",
    "domain": "Version Control (Git)",
    "careerTags": ["software_developer"],
    "conceptTags": ["merge","rebase"],
    "skillTags": ["tool familiarity"],
    "difficulty": "Medium",
    "format": "text",
    "answerType": "single-choice",
    "timeLimitSeconds": 40,
    "scoreWeight": 1.0,
    "isVerified": true,
    "hasCodeBlock": false,
    "showCalculator": false,
    "allowSkip": false,
    "showOnReviewScreen": true
  },
  {
    "id": "sd_027",
    "type": "mcq",
    "question": "When should you avoid rebasing a Git branch?",
    "options": [
      "When it's a local private branch",
      "After you’ve pushed it and shared with others",
      "When you want a clean history",
      "When you're working solo"
    ],
    "correctAnswer": "After you’ve pushed it and shared with others",
    "explanation": "Rewriting history of a public branch can cause confusion and conflicts :contentReference[oaicite:2]{index=2}.",
    "domain": "Version Control (Git)",
    "careerTags": ["software_developer"],
    "conceptTags": ["rebase","best practices"],
    "skillTags": ["tool familiarity"],
    "difficulty": "Medium",
    "format": "text",
    "answerType": "single-choice",
    "timeLimitSeconds": 40,
    "scoreWeight": 1.0,
    "isVerified": true,
    "hasCodeBlock": false,
    "showCalculator": false,
    "allowSkip": false,
    "showOnReviewScreen": true
  },
  {
    "id": "sd_028",
    "type": "scenario",
    "question": "In a Flutter widget test, you need to mock an HTTP client. Which tool is best?",
    "options": ["Use real HTTP", "Mockito", "Manual JSON file", "Skip test"],
    "correctAnswer": "Mockito",
    "explanation": "Mockito enables mocking HTTP clients and verifying behavior in widget tests :contentReference[oaicite:3]{index=3}.",
    "domain": "Development Tools",
    "careerTags": ["software_developer"],
    "conceptTags": ["widget testing","mocking"],
    "skillTags": ["tool familiarity"],
    "difficulty": "Medium",
    "format": "text",
    "answerType": "single-choice",
    "timeLimitSeconds": 50,
    "scoreWeight": 1.0,
    "isVerified": true,
    "hasCodeBlock": false,
    "showCalculator": false,
    "allowSkip": false,
    "showOnReviewScreen": true
  },
  {
    "id": "sd_029",
    "type": "mcq",
    "question": "What’s a best practice when using Mockito in Flutter tests?",
    "options": [
      "Mock the API call directly",
      "Mock dependencies like http.Client",
      "Mock every widget manually",
      "Avoid verifying interactions"
    ],
    "correctAnswer": "Mock dependencies like http.Client",
    "explanation": "Isolation through mocking dependencies improves test reliability :contentReference[oaicite:4]{index=4}.",
    "domain": "Development Tools",
    "careerTags": ["software_developer"],
    "conceptTags": ["mocking","unit test"],
    "skillTags": ["tool familiarity"],
    "difficulty": "Medium",
    "format": "text",
    "answerType": "single-choice",
    "timeLimitSeconds": 40,
    "scoreWeight": 1.0,
    "isVerified": true,
    "hasCodeBlock": false,
    "showCalculator": false,
    "allowSkip": false,
    "showOnReviewScreen": true
  },
  {
    "id": "sd_030",
    "type": "mcq",
    "question": "Why are isolated widget tests useful in Flutter?",
    "options": [
      "They test full app integration",
      "They allow mocking and independent UI behavior testing",
      "They run only on real devices",
      "They avoid mocking entirely"
    ],
    "correctAnswer": "They allow mocking and independent UI behavior testing",
    "explanation": "Isolated widget tests help verify UI behavior by mocking dependencies without full app launch :contentReference[oaicite:5]{index=5}.",
    "domain": "Development Tools",
    "careerTags": ["software_developer"],
    "conceptTags": ["widget testing"],
    "skillTags": ["software engineering"],
    "difficulty": "Medium",
    "format": "text",
    "answerType": "single-choice",
    "timeLimitSeconds": 45,
    "scoreWeight": 1.0,
    "isVerified": true,
    "hasCodeBlock": false,
    "showCalculator": false,
    "allowSkip": false,
    "showOnReviewScreen": true
  }
]

